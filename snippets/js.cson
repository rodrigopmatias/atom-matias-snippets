'.source.js':
    'rest-action':
        'prefix': 'js-rest-action'
        'body': '''
$1: function(pk, cbSuccess, cbFailure, cbCallback) {
    this.request(
        '$1',
        $2,
        '$3',
        {
            params: {
                pk: pk
            },
            scope: this,
            callback: function() {
                core.invoke((cbCallback || {fn: Ext.emptyFn}));
            },
            success: function(xhr) {
                var rst = Ext.decode(xhr.responseText);

                if(rst.success)
                    core.invoke((cbSuccess || {fn: Ext.emptyFn}), rst);
                else
                    core.invoke((cbFailure || {fn: Ext.emptyFn}), rst.message);
            },
            failure: function() {
                core.invoke((cbFailure || {fn: Ext.emptyFn}), 'Recurso indisponivel no momento.');
            }
        }
    );
}$4'''
    'nullValue':
        'prefix': 'js-nvl'
        'body': '$1 = ($1 || $2);$0'
    'getset':
        'prefix': 'js-getset',
        'body': '''
$1: function(value, dispatch) {
    dispatch = (dispatch === ${2:undefined} ? true : dispatch);

    if(value !== ${2:undefined}) {
        this._$1 = value;

        if(dispatch)
            this.$1Observe();
    }

    return this._$1;
},

$1Observe: function() {
    var value = this.$1();

    if(value) {
        console.info('$1 com valor');
    }
    else {
        console.info('$1 sem valor');
    }
}$4'''
    'fnc':
        'prefix': 'js-fnc'
        'body': '''
$1: function($2) {
    if(!$3)
        $3 = Ext.create($4);

    return $3;
}$5'''
    'function':
        'prefix': 'js-fn'
        'body': '$1: function($2) {$3}$4'
